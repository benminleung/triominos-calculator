{"version":3,"sources":["components/player-select/playerSelect.tsx","components/number-pad/numberPad.tsx","components/main-page/mainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerSelect","props","className","num","name","method","player1","player2","player3","player4","map","player","key","selectedPlayer","onClick","selectPlayer","reduce","a","b","points","otherPoints","NumberPad","pad","list","Fragment","setPlayer","MainPage","init","useState","setPlayer1","setPlayer2","setPlayer3","setPlayer4","setSelectedPlayer","resetTrigger","setResetTrigger","playerSelectProps","useEffect","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.284b2f47.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\r\nimport { CountList, Player } from \"../../modals/playerModal\";\r\nimport \"./playerSelect.scss\";\r\n\r\nexport interface PlayerSelectProps {\r\n  player1: CountList;\r\n  player2: CountList;\r\n  player3: CountList;\r\n  player4: CountList;\r\n  selectedPlayer: Player;\r\n  selectPlayer: any;\r\n}\r\n\r\nexport default function PlayerSelect(props: PlayerSelectProps): ReactElement {\r\n  const countListSum: (x: number[]) => number = listOfNumbers =>\r\n    listOfNumbers.reduce((a, b) => a + b, 0);\r\n  // const countListSum: number = (listOfNumbers: number[]) => {return 0})\r\n\r\n  return (\r\n    <div className=\"player-select\">\r\n      Select A Player\r\n      <div className=\"players\">\r\n        {[\r\n          { num: \"1\", name: \"player1\", method: props.player1 },\r\n          { num: \"2\", name: \"player2\", method: props.player2 },\r\n          { num: \"3\", name: \"player3\", method: props.player3 },\r\n          { num: \"4\", name: \"player4\", method: props.player4 }\r\n        ].map(player => {\r\n          return (\r\n            <div\r\n              key={player.name}\r\n              className={`player-box ${props.selectedPlayer === player.name &&\r\n                \"selected\"}`}\r\n              onClick={() => props.selectPlayer(player.name)}\r\n            >\r\n              Player {player.num}\r\n              <p>{countListSum(player.method)}</p>\r\n            </div>\r\n          );\r\n        })}\r\n        {/* <div\r\n        className={`player ${props.selectedPlayer === \"player1\"}`}\r\n        onClick={() => props.selectPlayer(\"player1\")}\r\n      >\r\n        Player 1<p>{countListSum(props.player1)}</p>\r\n      </div>\r\n      <div\r\n        className={`player ${props.selectedPlayer === \"player2\"}`}\r\n        onClick={() => props.selectPlayer(\"player2\")}\r\n      >\r\n        Player 2<p>{countListSum(props.player2)}</p>\r\n      </div>\r\n      <div\r\n        className={`player ${props.selectedPlayer === \"player3\"}`}\r\n        onClick={() => props.selectPlayer(\"player3\")}\r\n      >\r\n        Player 3<p>{countListSum(props.player3)}</p>\r\n      </div>\r\n      <div\r\n        className={`player ${props.selectedPlayer === \"player4\"}`}\r\n        onClick={() => props.selectPlayer(\"player4\")}\r\n      >\r\n        Player 4<p>{countListSum(props.player4)}</p>\r\n      </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ReactElement } from \"react\";\r\nimport \"./numberPad.scss\";\r\ninterface NumberPadProps {\r\n  setPlayer: (points: number) => void;\r\n}\r\n\r\nconst points = [1, 2, 3, 4, 5];\r\nconst otherPoints = [10, 40, 50];\r\n\r\nexport default function NumberPad(props: NumberPadProps): ReactElement {\r\n  const pad = (list: number[]) =>\r\n    list.map(points => (\r\n      <React.Fragment key={\"points\" + points}>\r\n        <label className=\"button plus\" onClick={() => props.setPlayer(points)}>\r\n          +{points}\r\n        </label>\r\n        <label className=\"button\" onClick={() => props.setPlayer(points * -1)}>\r\n          -{points}\r\n        </label>\r\n      </React.Fragment>\r\n    ));\r\n  return (\r\n    <div className=\"number-pad\">\r\n      <div className=\"pad\">\r\n        {pad(points)}\r\n      </div>\r\n      <div className=\"pad\">\r\n        {pad(otherPoints)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { ReactElement, useState, useEffect } from \"react\";\r\nimport PlayerSelect, { PlayerSelectProps } from \"../player-select/playerSelect\";\r\nimport { CountList, Player } from \"../../modals/playerModal\";\r\nimport NumberPad from \"../number-pad/numberPad\";\r\nimport \"./main-page.scss\";\r\n\r\ninterface Props {}\r\n\r\nexport default function MainPage({}: Props): ReactElement {\r\n  const init: CountList = [];\r\n\r\n  const [player1, setPlayer1]: [CountList, any] = useState<CountList>(init);\r\n  const [player2, setPlayer2]: [CountList, any] = useState<CountList>(init);\r\n  const [player3, setPlayer3]: [CountList, any] = useState<CountList>(init);\r\n  const [player4, setPlayer4]: [CountList, any] = useState<CountList>(init);\r\n\r\n  const [selectedPlayer, setSelectedPlayer]: [Player, any] = useState<Player>(\r\n    \"player1\"\r\n  );\r\n  const [resetTrigger, setResetTrigger]: [boolean, any] = useState<boolean>(\r\n    false\r\n  );\r\n\r\n  const selectPlayer = (player: Player) => {\r\n    setSelectedPlayer(player);\r\n  };\r\n\r\n  const playerSelectProps: PlayerSelectProps = {\r\n    player1,\r\n    player2,\r\n    player3,\r\n    player4,\r\n    selectedPlayer,\r\n    selectPlayer\r\n  };\r\n\r\n  const setPlayer = (points: number) => {\r\n    switch (selectedPlayer) {\r\n      case \"player1\":\r\n        setPlayer1([...player1, points]);\r\n        break;\r\n      case \"player2\":\r\n        setPlayer2([...player2, points]);\r\n        break;\r\n      case \"player3\":\r\n        setPlayer3([...player3, points]);\r\n        break;\r\n      case \"player4\":\r\n        setPlayer4([...player4, points]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setPlayer1(init);\r\n    setPlayer2(init);\r\n    setPlayer3(init);\r\n    setPlayer4(init);\r\n    setResetTrigger(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"selectedPlayer\", selectedPlayer);\r\n  });\r\n\r\n  return (\r\n    <div className=\"main-page\">\r\n      <h1>Triominos Calculator v.0.1(beta)</h1>\r\n      <div>\r\n        <PlayerSelect {...playerSelectProps}></PlayerSelect>\r\n        <NumberPad setPlayer={setPlayer}></NumberPad>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <button onClick={() => setResetTrigger(true)}>Reset</button>\r\n        {resetTrigger && (\r\n          <div>\r\n            <p>Are you sure you want to reset?</p>\r\n            <button onClick={() => reset()}>Yes</button>\r\n            <br />\r\n            <br />\r\n            <br />\r\n            <button onClick={() => setResetTrigger(false)}>No</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"footer\"><p>Made by Pok Tik Benjamin Leung</p></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport MainPage from './components/main-page/mainPage';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <MainPage></MainPage>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}